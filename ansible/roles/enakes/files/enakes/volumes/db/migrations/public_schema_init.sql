-- migrate:up
--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.7 (Ubuntu 15.7-1.pgdg20.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: public; Type: SCHEMA; Schema: -; Owner: pg_database_owner
--

CREATE SCHEMA public;


ALTER SCHEMA public OWNER TO pg_database_owner;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: pg_database_owner
--

COMMENT ON SCHEMA public IS 'standard public schema';


--
-- Name: handle_new_user(); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.handle_new_user() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$BEGIN
  IF NOT EXISTS (SELECT 1 FROM public.profiles WHERE user_id = new.id) THEN
    INSERT INTO public.profiles (user_id, avatar_url, full_name)
    VALUES (new.id, new.raw_user_meta_data->>'avatar_url',new.raw_user_meta_data->>'full_name');
  END IF;
  RETURN new;
END;$$;


ALTER FUNCTION public.handle_new_user() OWNER TO supabase_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: blog_tags; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.blog_tags (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE public.blog_tags OWNER TO supabase_admin;

--
-- Name: blogs; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.blogs (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tag_id uuid,
    title character varying NOT NULL,
    body text NOT NULL,
    author character varying NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    update_at timestamp with time zone
);


ALTER TABLE public.blogs OWNER TO supabase_admin;

--
-- Name: calendars; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.calendars (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid DEFAULT auth.uid(),
    activity character varying NOT NULL,
    do_at timestamp with time zone NOT NULL,
    read_only boolean DEFAULT false
);


ALTER TABLE public.calendars OWNER TO supabase_admin;

--
-- Name: clinic_schedules; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.clinic_schedules (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    clinic_id uuid NOT NULL,
    day_id bigint,
    start_time time without time zone,
    end_time time without time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone
);


ALTER TABLE public.clinic_schedules OWNER TO supabase_admin;

--
-- Name: clinics; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.clinics (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying NOT NULL,
    address text,
    motto character varying,
    phone_number character varying,
    photos text[],
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.clinics OWNER TO supabase_admin;

--
-- Name: days; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.days (
    id bigint NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE public.days OWNER TO supabase_admin;

--
-- Name: days_id_seq; Type: SEQUENCE; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.days ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.days_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: hospitals; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.hospitals (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying NOT NULL,
    address text NOT NULL,
    telephone character varying NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone
);


ALTER TABLE public.hospitals OWNER TO supabase_admin;

--
-- Name: notifications; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.notifications (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid DEFAULT auth.uid(),
    title character varying NOT NULL,
    body character varying NOT NULL,
    is_read boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone
);


ALTER TABLE public.notifications OWNER TO supabase_admin;

--
-- Name: practice_schedules; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.practice_schedules (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    day_id bigint NOT NULL,
    start_time time without time zone,
    end_time time without time zone,
    created_at timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text),
    updated_at timestamp with time zone
);


ALTER TABLE public.practice_schedules OWNER TO supabase_admin;

--
-- Name: profiles; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.profiles (
    avatar_url text,
    place_of_birth character varying,
    date_of_birth date,
    no_induk_kependudukan character varying,
    no_kartu_keluarga character varying,
    full_name character varying,
    profession character varying,
    phone_number character varying,
    clinic_id uuid,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone,
    user_id uuid DEFAULT auth.uid() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE public.profiles OWNER TO supabase_admin;

--
-- Name: blog_tags blog_tags_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.blog_tags
    ADD CONSTRAINT blog_tags_pkey PRIMARY KEY (id);


--
-- Name: blogs blogs_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.blogs
    ADD CONSTRAINT blogs_pkey PRIMARY KEY (id);


--
-- Name: calendars calendars_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.calendars
    ADD CONSTRAINT calendars_pkey PRIMARY KEY (id);


--
-- Name: clinic_schedules clinic_schedules_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.clinic_schedules
    ADD CONSTRAINT clinic_schedules_pkey PRIMARY KEY (id);


--
-- Name: clinics clinics_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.clinics
    ADD CONSTRAINT clinics_pkey PRIMARY KEY (id);


--
-- Name: days days_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.days
    ADD CONSTRAINT days_pkey PRIMARY KEY (id);


--
-- Name: hospitals hospitals_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.hospitals
    ADD CONSTRAINT hospitals_pkey PRIMARY KEY (id);


--
-- Name: notifications notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.notifications
    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);


--
-- Name: practice_schedules practice_schedules_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.practice_schedules
    ADD CONSTRAINT practice_schedules_pkey PRIMARY KEY (id);


--
-- Name: profiles profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_pkey PRIMARY KEY (user_id, id);


--
-- Name: profiles profiles_user_id_key; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_user_id_key UNIQUE (user_id);


--
-- Name: blogs blogs_tag_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.blogs
    ADD CONSTRAINT blogs_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES public.blog_tags(id) ON DELETE SET NULL;


--
-- Name: calendars calendars_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.calendars
    ADD CONSTRAINT calendars_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(user_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: clinic_schedules clinic_schedules_clinic_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.clinic_schedules
    ADD CONSTRAINT clinic_schedules_clinic_id_fkey FOREIGN KEY (clinic_id) REFERENCES public.clinics(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: clinic_schedules clinic_schedules_day_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.clinic_schedules
    ADD CONSTRAINT clinic_schedules_day_id_fkey FOREIGN KEY (day_id) REFERENCES public.days(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: notifications notifications_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.notifications
    ADD CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(user_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: practice_schedules practice_schedules_day_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.practice_schedules
    ADD CONSTRAINT practice_schedules_day_id_fkey FOREIGN KEY (day_id) REFERENCES public.days(id);


--
-- Name: practice_schedules practice_schedules_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.practice_schedules
    ADD CONSTRAINT practice_schedules_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(user_id) ON DELETE SET NULL;


--
-- Name: profiles profiles_clinic_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_clinic_id_fkey FOREIGN KEY (clinic_id) REFERENCES public.clinics(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: profiles profiles_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: calendars Enable delete for users based on user_id; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Enable delete for users based on user_id" ON public.calendars FOR DELETE TO authenticated USING ((( SELECT auth.uid() AS uid) = user_id));


--
-- Name: calendars Enable insert for users based on user_id; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Enable insert for users based on user_id" ON public.calendars FOR INSERT TO authenticated WITH CHECK ((( SELECT auth.uid() AS uid) = user_id));


--
-- Name: calendars Enable read access for authenticated same user_id; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Enable read access for authenticated same user_id" ON public.calendars FOR SELECT TO authenticated USING ((( SELECT auth.uid() AS uid) = user_id));


--
-- Name: calendars Enable update for users based on user_id; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Enable update for users based on user_id" ON public.calendars FOR UPDATE TO authenticated USING ((( SELECT auth.uid() AS uid) = user_id)) WITH CHECK ((( SELECT auth.uid() AS uid) = user_id));


--
-- Name: blog_tags; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.blog_tags ENABLE ROW LEVEL SECURITY;

--
-- Name: blogs; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.blogs ENABLE ROW LEVEL SECURITY;

--
-- Name: calendars; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.calendars ENABLE ROW LEVEL SECURITY;

--
-- Name: days; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.days ENABLE ROW LEVEL SECURITY;

--
-- Name: hospitals; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.hospitals ENABLE ROW LEVEL SECURITY;

--
-- Name: notifications; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

--
-- Name: clinic_schedules; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.clinic_schedules ENABLE ROW LEVEL SECURITY;

--
-- Name: clinics; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.clinics ENABLE ROW LEVEL SECURITY;

--
-- Name: practice_schedules; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.practice_schedules ENABLE ROW LEVEL SECURITY;

--
-- Name: profiles; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

--
-- Name: days select_days_policy; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY select_days_policy ON public.days FOR SELECT TO authenticated USING (true);

--
-- Name: blog_tags all_rls_blog_tags; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY all_rls_blog_tags
ON public.blog_tags
to authenticated, service_role
USING (true);

--
-- Name: blogs all_rls_blogs; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY all_rls_blogs
ON public.blogs
to authenticated, service_role
USING (true);

--
-- Name: clinic_schedules all_rls_clinic_schedules; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY all_rls_clinic_schedules
ON public.clinic_schedules
to authenticated, service_role
USING (true);

--
-- Name: clinics all_rls_clinics; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY all_rls_clinics
ON public.clinics
to authenticated, service_role
USING (true);

--
-- Name: hospitals all_rls_hospitals; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY all_rls_hospitals
ON public.hospitals
to authenticated, service_role
USING (true);

--
-- Name: notifications all_rls_notifications; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY all_rls_notifications
ON public.notifications
to authenticated, service_role
USING (true);

--
-- Name: practice_schedules all_rls_practice_schedules; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY all_rls_practice_schedules
ON public.practice_schedules
to authenticated, service_role
USING (true);

--
-- Name: profiles all_rls_profiles; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY all_rls_profiles
ON public.profiles
to authenticated, service_role
USING (true);


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: FUNCTION handle_new_user(); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.handle_new_user() TO postgres;
GRANT ALL ON FUNCTION public.handle_new_user() TO anon;
GRANT ALL ON FUNCTION public.handle_new_user() TO authenticated;
GRANT ALL ON FUNCTION public.handle_new_user() TO service_role;


--
-- Name: TABLE blog_tags; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.blog_tags TO postgres;
GRANT ALL ON TABLE public.blog_tags TO anon;
GRANT ALL ON TABLE public.blog_tags TO authenticated;
GRANT ALL ON TABLE public.blog_tags TO service_role;


--
-- Name: TABLE blogs; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.blogs TO postgres;
GRANT ALL ON TABLE public.blogs TO anon;
GRANT ALL ON TABLE public.blogs TO authenticated;
GRANT ALL ON TABLE public.blogs TO service_role;


--
-- Name: TABLE calendars; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.calendars TO postgres;
GRANT ALL ON TABLE public.calendars TO anon;
GRANT ALL ON TABLE public.calendars TO authenticated;
GRANT ALL ON TABLE public.calendars TO service_role;


--
-- Name: TABLE clinic_schedules; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.clinic_schedules TO postgres;
GRANT ALL ON TABLE public.clinic_schedules TO anon;
GRANT ALL ON TABLE public.clinic_schedules TO authenticated;
GRANT ALL ON TABLE public.clinic_schedules TO service_role;


--
-- Name: TABLE clinics; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.clinics TO postgres;
GRANT ALL ON TABLE public.clinics TO anon;
GRANT ALL ON TABLE public.clinics TO authenticated;
GRANT ALL ON TABLE public.clinics TO service_role;


--
-- Name: TABLE days; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.days TO postgres;
GRANT ALL ON TABLE public.days TO anon;
GRANT ALL ON TABLE public.days TO authenticated;
GRANT ALL ON TABLE public.days TO service_role;


--
-- Name: SEQUENCE days_id_seq; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE public.days_id_seq TO postgres;
GRANT ALL ON SEQUENCE public.days_id_seq TO anon;
GRANT ALL ON SEQUENCE public.days_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.days_id_seq TO service_role;


--
-- Name: TABLE hospitals; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.hospitals TO postgres;
GRANT ALL ON TABLE public.hospitals TO anon;
GRANT ALL ON TABLE public.hospitals TO authenticated;
GRANT ALL ON TABLE public.hospitals TO service_role;


--
-- Name: TABLE notifications; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.notifications TO postgres;
GRANT ALL ON TABLE public.notifications TO anon;
GRANT ALL ON TABLE public.notifications TO authenticated;
GRANT ALL ON TABLE public.notifications TO service_role;


--
-- Name: TABLE practice_schedules; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.practice_schedules TO postgres;
GRANT ALL ON TABLE public.practice_schedules TO anon;
GRANT ALL ON TABLE public.practice_schedules TO authenticated;
GRANT ALL ON TABLE public.practice_schedules TO service_role;


--
-- Name: TABLE profiles; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.profiles TO postgres;
GRANT ALL ON TABLE public.profiles TO anon;
GRANT ALL ON TABLE public.profiles TO authenticated;
GRANT ALL ON TABLE public.profiles TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- PostgreSQL database dump complete
--

-- migrate:down
DROP TABLE IF EXISTS public.blog_tags CASCADE;
DROP TABLE IF EXISTS public.blogs CASCADE;
DROP TABLE IF EXISTS public.calendars CASCADE;
DROP TABLE IF EXISTS public.clinic_schedules CASCADE;
DROP TABLE IF EXISTS public.clinics CASCADE;
DROP TABLE IF EXISTS public.days CASCADE;
DROP SEQUENCE IF EXISTS public.days_id_seq CASCADE;
DROP TABLE IF EXISTS public.hospitals CASCADE;
DROP TABLE IF EXISTS public.notifications CASCADE;
DROP TABLE IF EXISTS public.practice_schedules CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP FUNCTION IF EXISTS public.handle_new_user() CASCADE;
DROP POLICY IF EXISTS "Enable delete for users based on user_id" ON public.calendars CASCADE;
DROP POLICY IF EXISTS "Enable insert for users based on user_id" ON public.calendars CASCADE;
DROP POLICY IF EXISTS "Enable read access for authenticated same user_id" ON public.calendars CASCADE;
DROP POLICY IF EXISTS "Enable update for users based on user_id" ON public.calendars CASCADE;
DROP POLICY IF EXISTS select_days_policy ON public.days CASCADE;
DROP POLICY IF EXISTS all_rls_blog_tags ON public.blog_tags CASCADE;
DROP POLICY IF EXISTS all_rls_blogs ON public.blogs CASCADE;
DROP POLICY IF EXISTS all_rls_clinic_schedules ON public.clinic_schedules CASCADE;
DROP POLICY IF EXISTS all_rls_clinics ON public.clinics CASCADE;
DROP POLICY IF EXISTS all_rls_hospitals ON public.hospitals CASCADE;
DROP POLICY IF EXISTS all_rls_notifications ON public.notifications CASCADE;
DROP POLICY IF EXISTS all_rls_practice_schedules ON public.practice_schedules CASCADE;
DROP POLICY IF EXISTS all_rls_profiles ON public.profiles CASCADE;
ALTER TABLE public.blog_tags DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.blogs DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.calendars DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.clinic_schedules DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.clinics DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.days DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.hospitals DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.notifications DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.practice_schedules DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles DISABLE ROW LEVEL SECURITY; 